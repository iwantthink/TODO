/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
//所有的任务只会被 执行一次 。 无论你是执行了多少个
// 打个比方  gradle test test  和 gradle test 是得到一样的结果
task compile{
	doLast{
		println 'compile'
	}
}

task compileTest(dependsOn:compile){
	doLast{
		println 'compile test'
	}
}

task test (dependsOn:[compile,compileTest]){
	doLast{
		println 'test'
	}
}

task dist(dependsOn:[compile,test]){
	description = 'i am dist'
	group = 'dist'

	doLast{
		pirntln 'dist'
	}
}

//可以通过-x 来排除指定的 任务
//gradle compileTest -x compile



//gradle test --continue  ，gradle会执行所有的任务，即使遇到了失败的任务



//在调用 task的时候 ，如果task的 缩写 不会和其他的task冲突 ，那么可以直接使用这个 缩写来调用
//gradle d   ==  gradle dist



//调用task的时候，如果task 使用驼峰式命名(必须是，另外注意大小写) ，则可以 使用驼峰式的缩写
//gradle cT == gradle compileTest



//通过 -b 的指令 来指定 使用哪个构建文件
//通过 -p 的指令 来指定 使用哪个项目
//gradle -p -b subBuild/build.gradle sayHi



//--rerun-tasks
//强制gradle运行所有任务



//gradle projects 
//获取 项目列表



//gradle tasks 
// 获取 任务列表
//--all 用来获取所有任务 ，包括未分类的



// description = ''    group = ''
//用来设置 说明  和 分组 ,应该是在闭包中设置的



//查看特定任务的详细信息
//gradle -q help --task taskName(指定任务名称)



//列出项目依赖关系
//gradle dependencies projectName(指定项目名称):dependencies



//获取指定项目的属性列表
//gradle projectName(项目名称):properties



//通过添加 指令 --profile  , 可以记录构建运行时的一些信息 ， 并写入报告 build/reports/profile 目录



//通过-m的指令，可以显示任务的执行顺序 而不去真正的执行
// gradle -m gradle



//gradle wrapper  解决了用户安装复杂， 版本不正确的工具，是开始gradle构建的首选方式
//gradlew <task>
//gradlew 会被绑定在一个指定版本的gradle ， 所以当你用这个命令时，它会去下载相应的版本，并使用它来构建
//构成gradle wrapper的目录
// gradle(unix shell script)    gradlew.bat(windows batch file)  
//gradle/wrapper/gradle-wrapper.jar       gradle/wrapper/gradle-wrapper.properties 
//gradle 可以在 $user_home/.gradle/wrapper/dists



// gradle守护程序
// gradle在JVM上运行，并且需要几个支持库。有时候看起来运行比较慢，gradle Daemon就是为了解决这个问题
// gradle Daemon 会长久的存活在后台
// 通过--status 指令  查看gradle Daemon 的状态列表
// gradle --status



//禁用Daemon
// 常见方法是在USER_HOME/.gradle/gradle.properties中 添加 org.gradle.daemon = FALSE


//停止Daemon
//使用--stop
//gradle --stop



//开启Daemon
//gradle --daemon



//如果没有现在闲置的空守护进程 ，gradle将会启动一个新的Daemon
// 另外gradle会杀死已经闲置了 3个小时或者更长时间的daemon



//如果构建环境 没有指定最大堆大小，守护进程将使用1GB的堆内存
//可以为 daemon 设置指定使用内存



//设置依赖
//compile   runtime   testCompile  testRuntime
// compile group:'',name:'',version:''
/*
	dependencies{
		compile group:name:version
	}
*/


//默认Gradle 是没有定义任何存储库 。至少需要定义一个 ，才能使用外部依赖
/*
	repositories{
		mavenCentral()
	}

	repositories{
		jcenter()
	}
	指定maven库
	repositories{
		maven{
			url "http://repo.xx.xx.xx"
		}
	}
	//远程ivy 库
	repositories{
		ivy{
			url ""
		}
	}
	//本地ivy库
	repositories{
		ivy{//url可以引用本地目录
			url "../repo"
		}
	}


*/



//上传 发布产品
//利用uploadArchives task 
/*
	发布到ivy
	uploadArchives {
		repositories{
			ivy {
				credentials{
					username ''
					password ''
				}
				url ''
			}
		}
	}


	发布maven，还需要单独的apply maven插件
	apply plugin:'maven'
	uploadArchives{
		repositories{
			mavenDeployer{
				repository(url:'')
			}
		}

	}

	
*/



//执行多项目任务
//建议指定路径
//gradle :subBUild:build
//gradle taskName 这种方式也可以 ，不过最好只在单项目中使用




//build.gradle  可以从 gradle.properties 中获取数据。。。
task printProperties{
	doLast{
		println "userName = $userName"
		println "age = $age"
	}
}



//如过遇到gradle的问题
//首先更新至最新版本的 gradle，因为可能已经被修复
//其次尝试禁用守护进程(--no-daemon)



//gradle 提供了一套Tooling Api
//此API 允许执行，监视构建 以及 查询 gradle的相关构建信息
// def toolingApiVersion = 
// repositories{
// 	maven{url 'https://repo.gradle.org/gradle/libs-releases'}
// }

// dependencies{
//     compile "org.gradle:gradle-tooling-api:${toolingApiVersion}"
//     // The tooling API need an SLF4J implementation available at runtime, replace this with any other implementation
//     runtime 'org.slf4j:slf4j-simple:1.7.10'
// }










allprojects{
	afterEvaluate{
		  println "allprojects = $it.name"
	}
}

gradle.afterProject {
	project,projectState->
	if (projectState.failure) {
		println "evalution of $project Failed"
	}else{
		println "evalution of $project succeeded"
	}
}